# Generated by Django 2.2.7 on 2020-02-23 18:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Atom',
            fields=[
                ('atom_name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('scattering_length_adj', models.FloatField(default=0, verbose_name='scattering length adjustment')),
            ],
            options={
                'verbose_name': 'atom',
                'verbose_name_plural': 'atoms',
            },
        ),
        migrations.CreateModel(
            name='Data_Lipid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_lipid_suffix', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'data lipid',
                'verbose_name_plural': 'data lipids',
            },
        ),
        migrations.CreateModel(
            name='Lipid',
            fields=[
                ('lipid_name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='lipid name')),
                ('hg_scattering', models.FloatField(default=0, verbose_name='head group scattering length')),
                ('hg_electrons', models.FloatField(default=0, verbose_name='head group electrons')),
                ('hg_volume', models.FloatField(default=0, verbose_name='head group volume')),
                ('tg_scattering', models.FloatField(default=0, verbose_name='tail group scattering length')),
                ('tg_electrons', models.FloatField(default=0, verbose_name='tail group electrons')),
                ('tm_scattering', models.FloatField(default=0, verbose_name='terminal methyl scattering length')),
                ('tm_electrons', models.FloatField(default=0, verbose_name='terminal methyl electrons')),
                ('total_volume_equation', models.CharField(default='x', max_length=200, verbose_name='total volume equation')),
            ],
            options={
                'verbose_name': 'lipid',
                'verbose_name_plural': 'lipids',
            },
        ),
        migrations.CreateModel(
            name='Molecule',
            fields=[
                ('compound_name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('total_volume_equation', models.CharField(default='x', max_length=200, verbose_name='total volume equation')),
                ('scattering_length', models.FloatField(default=0, verbose_name='scattering length')),
                ('electrons', models.FloatField(default=0, verbose_name='electrons')),
            ],
            options={
                'verbose_name': 'molecule',
                'verbose_name_plural': 'molecules',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_title', models.CharField(max_length=200, verbose_name='project title')),
                ('model_type', models.CharField(choices=[('SM', 'Symmetrical')], max_length=3, verbose_name='model')),
                ('system_tempurature', models.FloatField(default=0, verbose_name='system tempurature')),
                ('owner', models.ForeignKey(default='admin', on_delete=django.db.models.deletion.CASCADE, related_name='project_owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_title', models.CharField(max_length=200, verbose_name='sample title')),
                ('project_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sample', to='viewer.Project')),
            ],
            options={
                'verbose_name': 'sample',
                'verbose_name_plural': 'samples',
            },
        ),
        migrations.CreateModel(
            name='Symmetrical_Parameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('chain_volume', models.FloatField(default=0, verbose_name='chain volume')),
                ('chain_volume_upperbound', models.FloatField(default=100, verbose_name='cv upper bound')),
                ('chain_volume_lowerbound', models.FloatField(default=0, verbose_name='cv lower bound')),
                ('chain_volume_lock', models.BooleanField(default=True, verbose_name='cv lock')),
                ('headgroup_volume', models.FloatField(default=0, verbose_name='headgroup volume')),
                ('headgroup_volume_upperbound', models.FloatField(default=100, verbose_name='hv upper bound')),
                ('headgroup_volume_lowerbound', models.FloatField(default=0, verbose_name='hv lower bound')),
                ('headgroup_volume_lock', models.BooleanField(default=True, verbose_name='hv lock')),
                ('terminal_methyl_volume', models.FloatField(default=55, verbose_name='terminal methyl volume')),
                ('terminal_methyl_volume_upperbound', models.FloatField(default=60, verbose_name='tmv upper bound')),
                ('terminal_methyl_volume_lowerbound', models.FloatField(default=45, verbose_name='tmv lower bound')),
                ('terminal_methyl_volume_lock', models.BooleanField(default=False, verbose_name='tmv lock')),
                ('lipid_area', models.FloatField(default=60, verbose_name='lipid area')),
                ('lipid_area_upperbound', models.FloatField(default=80, verbose_name='la upper bound')),
                ('lipid_area_lowerbound', models.FloatField(default=40, verbose_name='la lower bound')),
                ('lipid_area_lock', models.BooleanField(default=False, verbose_name='la lock')),
                ('headgroup_thickness', models.FloatField(default=8, verbose_name='headgroup thickness')),
                ('headgroup_thickness_upperbound', models.FloatField(default=15, verbose_name='ht upper bound')),
                ('headgroup_thickness_lowerbound', models.FloatField(default=5, verbose_name='ht lower bound')),
                ('headgroup_thickness_lock', models.BooleanField(default=False, verbose_name='ht lock')),
                ('sigma', models.FloatField(default=2.5, verbose_name='sigma')),
                ('sigma_upperbound', models.FloatField(default=4, verbose_name='sig upper bound')),
                ('sigma_lowerbound', models.FloatField(default=2, verbose_name='sig lower bound')),
                ('sigma_lock', models.BooleanField(default=True, verbose_name='sig lock')),
                ('average_vesicle_radius', models.FloatField(default=0, verbose_name='average vesicle radius')),
                ('average_vesicle_radius_upperbound', models.FloatField(default=1, verbose_name='avr upper bound')),
                ('average_vesicle_radius_lowerbound', models.FloatField(default=-1, verbose_name='avr lower bound')),
                ('average_vesicle_radius_lock', models.BooleanField(default=True, verbose_name='avr lock')),
                ('relative_size', models.FloatField(default=0, verbose_name='relative size')),
                ('relative_size_upperbound', models.FloatField(default=1, verbose_name='rs upper bound')),
                ('relative_size_lowerbound', models.FloatField(default=-1, verbose_name='rs lower bound')),
                ('relative_size_lock', models.BooleanField(default=True, verbose_name='rs lock')),
                ('fit_report', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=500), blank=True, null=True, size=None, verbose_name='fitted parameter report')),
                ('sample_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='viewer.Sample')),
            ],
            options={
                'verbose_name': 'parameter',
                'verbose_name_plural': 'parameters',
            },
        ),
        migrations.CreateModel(
            name='Project_Lipid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lipid_mol_fraction', models.FloatField(default=0, verbose_name='project_lipid_mol_fraction')),
                ('project_lipid_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_lipid_name', to='viewer.Lipid')),
                ('project_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_lipid', to='viewer.Project')),
            ],
            options={
                'verbose_name': 'project lipid',
                'verbose_name_plural': 'project lipids',
            },
        ),
        migrations.CreateModel(
            name='ExtendedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_tutorial', models.BooleanField(default=True, verbose_name='display_tutorial')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Data_Set',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_set_title', models.CharField(blank=True, max_length=255)),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
                ('d2o_mol_fraction', models.FloatField(default=0, verbose_name='d2o mol fraction')),
                ('data_type', models.CharField(choices=[('XR', 'X-Ray'), ('NU', 'Neutron')], default='XR', max_length=2, verbose_name='data type')),
                ('q_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), blank=True, size=None, verbose_name='q_values')),
                ('intensity_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), blank=True, size=None, verbose_name='intensity_values')),
                ('error_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), blank=True, size=None, verbose_name='error_values')),
                ('max_index', models.IntegerField(blank=True, null=True, verbose_name='max index')),
                ('min_index', models.IntegerField(blank=True, null=True, verbose_name='min index')),
                ('scale', models.FloatField(default=1, verbose_name='scale')),
                ('scale_upperbound', models.FloatField(default=10, verbose_name='scale upper bound')),
                ('scale_lowerbound', models.FloatField(default=1e-06, verbose_name='scale lower bound')),
                ('scale_lock', models.BooleanField(default=False, verbose_name='scale lock')),
                ('background', models.FloatField(default=0, verbose_name='background')),
                ('background_upperbound', models.FloatField(default=1, verbose_name='bg upper bound')),
                ('background_lowerbound', models.FloatField(default=-1, verbose_name='bg lower bound')),
                ('background_lock', models.BooleanField(default=False, verbose_name='bg lock')),
                ('sample_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datas', to='viewer.Sample')),
            ],
            options={
                'verbose_name': 'data_set',
                'verbose_name_plural': 'data_sets',
            },
        ),
        migrations.CreateModel(
            name='Data_Lipid_Atom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_lipid_atom_ammount', models.IntegerField(default=0, verbose_name='data_lipid_atom_ammount')),
                ('atom_location', models.CharField(choices=[('HG', 'Headgroup'), ('TG', 'Tailgroup')], max_length=3, verbose_name='atom_location')),
                ('data_lipid_atom_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_lipid_atom_name', to='viewer.Atom')),
                ('data_lipid_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_atom_lipid_name', to='viewer.Data_Lipid')),
            ],
            options={
                'verbose_name': 'data lipid atom',
                'verbose_name_plural': 'data lipid atoms',
            },
        ),
        migrations.AddField(
            model_name='data_lipid',
            name='data_lipid_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_lipid_name', to='viewer.Project_Lipid'),
        ),
        migrations.AddField(
            model_name='data_lipid',
            name='data_set_title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_lipid', to='viewer.Data_Set'),
        ),
    ]
